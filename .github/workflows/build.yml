name: Build Docker Container

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}    

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          lfs: true
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3  
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-        
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set image tag for main image
        id: set_tag
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "tag=pr-${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          else
            echo "tag=latest" >> $GITHUB_OUTPUT
          fi
      - name: Build Docker image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          tags: |
            ghcr.io/danpowell88/ravenshield_dedicatedserver:${{ steps.set_tag.outputs.tag }}
            ravenshield_dedicatedserver:${{ steps.set_tag.outputs.tag }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          load: true
      - name: Run Docker container
        run: |
          docker run -d -p 8777:8777/udp --name test-container ravenshield_dedicatedserver:${{ steps.set_tag.outputs.tag }}
      - name: Wait for health check
        run: |
          START_TIME=$(date -Is)   # RFC-3339 timestamp
          for i in {1..50}; do
            STATUS=$(docker inspect --format='{{json .State.Health.Status}}' test-container)
            if [ "$STATUS" = "\"healthy\"" ]; then
              echo "Container is healthy"
              exit 0
            fi
  
            echo "[$(date -Is)] attempt $i/30 - current status: $STATUS"
            # show only logs produced since the previous iteration
            docker logs --since "$START_TIME" test-container || true
            START_TIME=$(date -Is)
  
            sleep 5
          done
  
          echo "Health check failed"
          docker logs test-container
          exit 1
      - name: Stop and remove container
        run: |
          docker stop test-container
          docker rm test-container
      - name: Push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ghcr.io/danpowell88/ravenshield_dedicatedserver:${{ steps.set_tag.outputs.tag }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true

  build-alpine:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          lfs: true
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3  
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-        
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set image tag for main image
        id: set_tag
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "tag=pr-${{ github.event.pull_request.number }}-alpine" >> $GITHUB_OUTPUT
          else
            echo "tag=latest-alpine" >> $GITHUB_OUTPUT
          fi      
      - name: Build Docker image (alpine)
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile.alpine
          push: false
          tags: |
            ghcr.io/danpowell88/ravenshield_dedicatedserver:${{ steps.set_tag.outputs.tag }}
            ravenshield_dedicatedserver:${{ steps.set_tag.outputs.tag }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          load: true
      - name: Run Docker container (alpine)
        run: |
          docker run -d -p 8777:8777/udp --name test-container ravenshield_dedicatedserver:${{ steps.set_tag.outputs.tag }}
      - name: Wait for health check
        run: |
          START_TIME=$(date -Is)   # RFC-3339 timestamp
          for i in {1..50}; do
            STATUS=$(docker inspect --format='{{json .State.Health.Status}}' test-container)
            if [ "$STATUS" = "\"healthy\"" ]; then
              echo "Container is healthy"
              exit 0
            fi
    
            echo "[$(date -Is)] attempt $i/30 - current status: $STATUS"
            # show only logs produced since the previous iteration
            docker logs --since "$START_TIME" test-container || true
            START_TIME=$(date -Is)
    
            sleep 5
          done
    
          echo "Health check failed"
          docker logs test-container
          exit 1
      - name: Stop and remove container (alpine)
        run: |
          docker stop test-container
          docker rm test-container
      - name: Push Docker image (alpine)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile.alpine
          push: true
          tags: ghcr.io/danpowell88/ravenshield_dedicatedserver:${{ steps.set_tag.outputs.tag }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true          
      # Temp fix for https://github.com/docker/build-push-action/issues/252
      # This ugly bit is necessary if you don't want your cache to grow forever
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
